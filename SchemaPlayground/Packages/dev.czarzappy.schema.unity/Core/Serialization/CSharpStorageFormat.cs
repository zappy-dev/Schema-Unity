using Schema.Core.Data;
using Schema.Core.IO;
using static Schema.Core.SchemaResult;
using System.Text;
using Schema.Core.Ext;
using Schema.Core.Schemes;

namespace Schema.Core.Serialization
{
    public class CSharpStorageFormat : IStorageFormat<DataScheme>
    {
        public string Extension => "g.cs";
        public string DisplayName => "CodeGen C#";
        public bool IsImportSupported => false;
        public bool IsExportSupported => true;

        private readonly IFileSystem fileSystem;

        public CSharpStorageFormat(IFileSystem fileSystem)
        {
            this.fileSystem = fileSystem;
        }

        public SchemaResult<DataScheme> DeserializeFromFile(string filePath)
        {
            throw new System.NotImplementedException();
        }

        public SchemaResult<DataScheme> Deserialize(string content)
        {
            throw new System.NotImplementedException();
        }

        // HACK
        public ManifestEntry ManifestEntry;
        
        public SchemaResult SerializeToFile(string filePath, DataScheme scheme)
        {
            var schemeClassName = $"{scheme.SchemeName}Scheme";
            var entryClassName = $"{scheme.SchemeName}Entry";
            var sb = new StringBuilder();
            
            // Class header
            sb.Append(
$@"using Schema.Core;
using Schema.Core.Data;
using Schema.Core.Schemes;
using UnityEngine;
using static Schema.Core.Schema;

namespace {ManifestEntry.CSharpNamespace}
{{
    /// <summary>
    /// This class was auto-generated by Schema based on the '{scheme.SchemeName}' data scheme.
    /// Do not modify this file directly. Changes may be overwritten.
    /// </summary>
    public partial class {schemeClassName} : SchemeWrapper<{entryClassName}>
    {{
        public const string SCHEMA_NAME = ""{scheme.SchemeName}"";
        
        public static SchemaResult<{schemeClassName}> Get()
        {{
            if (GetScheme(SCHEMA_NAME).Try(out var scheme, out var error))
            {{
                return SchemaResult<{schemeClassName}>.Pass(new {schemeClassName}(scheme));
            }}
            
            return error.CastError<{schemeClassName}>();
        }}

");

            var hasIdAttr = scheme.GetIdentifierAttribute().Try(out var idAttr);
            // ID Entry Enum
            // TODO: Sanitize identifier enums and validate the use-case for this
            if (false && hasIdAttr)
            {
                sb.Append(
$"  public enum Id" +
$"");
                
                sb.AppendLine("\t\t{");
                foreach (var identifierValue in scheme.GetIdentifierValues())
                {
                    sb.Append("\t\t\t").Append(identifierValue).AppendLine(",");
                }
                sb.AppendLine("\t\t}");
                sb.AppendLine("\t\t");
            }
            sb.AppendLine();
            sb.AppendLine($"        public {schemeClassName}(DataScheme dataScheme) : base(dataScheme)");
            sb.AppendLine("        {");
            sb.AppendLine("        }");
            sb.AppendLine();
            sb.AppendLine($"        protected override {entryClassName} EntryFactory(DataScheme dataScheme, DataEntry dataEntry)");
            sb.AppendLine("        {");
            sb.AppendLine($"            return new {entryClassName}(dataScheme, dataEntry);");
            sb.AppendLine("        }");
            if (hasIdAttr)
            {
                sb.AppendLine();
                
            }
            sb.AppendLine("    }");
            sb.AppendLine();
            
            // Generate Entry class
            sb.AppendLine("     [SerializeField]");
            sb.AppendLine($"    public partial class {entryClassName} : EntryWrapper");
            sb.AppendLine("    {");
            sb.AppendLine($"        public {entryClassName}(DataScheme dataScheme, DataEntry entry) : base(dataScheme, entry)");
            sb.AppendLine("        {");
            sb.AppendLine("        }");
            sb.AppendLine();
            foreach (var attributeDefinition in scheme.GetAttributes())
            {
                // TODO: strip out non-alpha numeric characters
                var attributePropertyName = attributeDefinition.AttributeName
                    .Replace(" ", string.Empty) // remove whitespace
                    .ToPascalCase();
                var attributeName = attributeDefinition.AttributeName;

                bool codeGenAttributeSetters = scheme.SchemeName == Manifest.MANIFEST_SCHEME_NAME;
                // TODO: Support more GetData functions for new data types
                // Codegen?
                string getDataMethod = "GetDataAsString";
                string csDataType = "string";
                switch (attributeDefinition.DataType)
                {
                    case BooleanDataType _:
                        getDataMethod = "GetDataAsBool";
                        csDataType = "bool";
                        break;
                    case IntegerDataType _:
                        getDataMethod = "GetDataAsInt";
                        csDataType = "bool";
                        break;
                    case FloatingPointDataType _:
                        getDataMethod = "GetDataAsFloat";
                        csDataType = "float";
                        break;
                }

                // Add XML doc comment if tooltip exists
                if (!string.IsNullOrWhiteSpace(attributeDefinition.AttributeToolTip))
                {
                    sb.AppendLine($"        /// <summary>");
                    sb.AppendLine($"        /// {attributeDefinition.AttributeToolTip}");
                    sb.AppendLine($"        /// </summary>");
                }

                if (codeGenAttributeSetters)
                {
                    sb.AppendLine($"        public {csDataType} {attributePropertyName}");
                    sb.AppendLine($"        {{");
                    sb.AppendLine($"            get => DataEntry.{getDataMethod}(\"{attributeName}\");");
                    sb.AppendLine($"            set => DataScheme.SetDataOnEntry(DataEntry, \"{attributeName}\", value);");
                    sb.AppendLine($"        }}");
                }
                else
                {
                    sb.AppendLine($"        public {csDataType} {attributePropertyName} => DataEntry.{getDataMethod}(\"{attributeName}\");");
                }
            }
            sb.AppendLine("    }");
            sb.AppendLine("}");

            fileSystem.WriteAllText(filePath, sb.ToString());
            return Pass($"Wrote {scheme} to file: {filePath}");
        }

        public SchemaResult<string> Serialize(DataScheme scheme)
        {
            throw new System.NotImplementedException();
        }
    }
}