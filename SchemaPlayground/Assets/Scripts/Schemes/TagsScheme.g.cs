// <auto-generated>
// This file was generated by Schema based on the 'Tags' data scheme.
// Any changes made directly to this file may be overwritten.
// </auto-generated>

using Schema.Core;
using Schema.Core.Data;
using Schema.Core.Schemes;
using static Schema.Core.Schema;


    /// <summary>
    /// Auto-generated strongly-typed wrapper for the 'Tags' data scheme.
    /// </summary>
    public partial class TagsScheme : SchemeWrapper<TagsEntry>
    {
        /// <summary>
        /// The canonical name of the data scheme.
        /// </summary>
        public const string SCHEMA_NAME = "Tags";
        
     
        /// <summary>
        /// Strongly-typed constants for identifier values in 'Tags'.
        /// </summary>
        public static class Ids
        {
         
            public const string BOOP = "BOOP";
         
            public const string FOO = "Foo";
         
            public const string BAR = "Bar";
     
        }

     
        public static SchemaResult<TagsScheme> Get()
        {
            if (GetScheme(SCHEMA_NAME).Try(out var scheme, out var error))
            {
                return SchemaResult<TagsScheme>.Pass(new TagsScheme(scheme));
            }
            
            return error.CastError<TagsScheme>();
        }
        
        public static SchemaResult<TagsEntry> GetEntry(object entryId)
        {
            if (!Get().Try(out var scheme, out var schemeError))
            {
                return schemeError.CastError<TagsEntry>();
            }
            
            return scheme.GetEntryById(entryId);
        }
        
        public TagsScheme(DataScheme dataScheme) : base(dataScheme) {}
        
        protected override TagsEntry EntryFactory(DataScheme dataScheme, DataEntry dataEntry) {
            return new TagsEntry(dataScheme, dataEntry);
        }
    }

    public partial class TagsEntry : EntryWrapper
    {
        /// <summary>
        /// Represents a single entry (row) in the 'Tags' data scheme.
        /// </summary>
        public TagsEntry(DataScheme dataScheme, DataEntry entry) : base(dataScheme, entry) {}

     
        /// <summary>
        /// Gets the value of 'ID'.
        /// </summary>
     
        public System.String ID => DataEntry.GetDataAsString("ID");
 
    }

