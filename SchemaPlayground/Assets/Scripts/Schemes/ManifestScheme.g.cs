using Schema.Core;
using Schema.Core.Data;
using Schema.Core.Schemes;
using static Schema.Core.Schema;

namespace ExampleProject.Schemes
{
    /// <summary>
    /// This class was auto-generated by Schema based on the 'Manifest' data scheme.
    /// Do not modify this file directly. Changes may be overwritten.
    /// </summary>
    public partial class ManifestScheme : SchemeWrapper<ManifestEntry>
    {
        public const string SCHEMA_NAME = "Manifest";
        
        public static SchemaResult<ManifestScheme> Get()
        {
            if (GetScheme(SCHEMA_NAME).Try(out var scheme, out var error))
            {
                return SchemaResult<ManifestScheme>.Pass(new ManifestScheme(scheme));
            }
            
            return error.CastError<ManifestScheme>();
        }


        public ManifestScheme(DataScheme dataScheme) : base(dataScheme)
        {
        }

        protected override ManifestEntry EntryFactory(DataScheme dataScheme, DataEntry dataEntry)
        {
            return new ManifestEntry(dataScheme, dataEntry);
        }

    }

    public partial class ManifestEntry : EntryWrapper
    {
        public ManifestEntry(DataScheme dataScheme, DataEntry entry) : base(dataScheme, entry)
        {
        }

        public string SchemeName
        {
            get => DataEntry.GetDataAsString("SchemeName");
            set => DataScheme.SetDataOnEntry(DataEntry, "SchemeName", value);
        }
        public string FilePath
        {
            get => DataEntry.GetDataAsString("FilePath");
            set => DataScheme.SetDataOnEntry(DataEntry, "FilePath", value);
        }
        public string PublishTarget
        {
            get => DataEntry.GetDataAsString("PublishTarget");
            set => DataScheme.SetDataOnEntry(DataEntry, "PublishTarget", value);
        }
        public string CSharpExportPath
        {
            get => DataEntry.GetDataAsString("CSharpExportPath");
            set => DataScheme.SetDataOnEntry(DataEntry, "CSharpExportPath", value);
        }
        public string CSharpNamespace
        {
            get => DataEntry.GetDataAsString("CSharpNamespace");
            set => DataScheme.SetDataOnEntry(DataEntry, "CSharpNamespace", value);
        }
    }
}
