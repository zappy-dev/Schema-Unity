// <auto-generated>
// This file was generated by Schema based on the 'Manifest' data scheme.
// Any changes made directly to this file may be overwritten.
// </auto-generated>

using Schema.Core;
using Schema.Core.Data;
using Schema.Core.Schemes;
using static Schema.Core.Schema;

namespace ExampleProject.Schemes 
{

    /// <summary>
    /// Auto-generated strongly-typed wrapper for the 'Manifest' data scheme.
    /// </summary>
    public partial class ManifestScheme : SchemeWrapper<ManifestEntry>
    {
        /// <summary>
        /// The canonical name of the data scheme.
        /// </summary>
        public const string SCHEMA_NAME = "Manifest";
        
     
        public static SchemaResult<ManifestScheme> Get()
        {
            if (GetScheme(SCHEMA_NAME).Try(out var scheme, out var error))
            {
                return SchemaResult<ManifestScheme>.Pass(new ManifestScheme(scheme));
            }
            
            return error.CastError<ManifestScheme>();
        }
        
        public static SchemaResult<ManifestEntry> GetEntry(object entryId)
        {
            if (!Get().Try(out var scheme, out var schemeError))
            {
                return schemeError.CastError<ManifestEntry>();
            }
            
            return scheme.GetEntryById(entryId);
        }
        
        public ManifestScheme(DataScheme dataScheme) : base(dataScheme) {}
        
        protected override ManifestEntry EntryFactory(DataScheme dataScheme, DataEntry dataEntry) {
            return new ManifestEntry(dataScheme, dataEntry);
        }
    }

    public partial class ManifestEntry : EntryWrapper
    {
        /// <summary>
        /// Represents a single entry (row) in the 'Manifest' data scheme.
        /// </summary>
        public ManifestEntry(DataScheme dataScheme, DataEntry entry) : base(dataScheme, entry) {}

     
        /// <summary>
        /// The name of the scheme
        /// </summary>
     
        public string SchemeName
        {
            get => DataEntry.GetDataAsString("SchemeName");
            set => DataScheme.SetDataOnEntry(DataEntry, "SchemeName", value);
        }
     
        /// <summary>
        /// Relative path to the staging file from this scheme
        /// </summary>
     
        public string FilePath
        {
            get => DataEntry.GetDataAsString("FilePath");
            set => DataScheme.SetDataOnEntry(DataEntry, "FilePath", value);
        }
 
    }
}
