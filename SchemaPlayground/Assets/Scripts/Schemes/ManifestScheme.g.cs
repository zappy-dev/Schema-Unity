using Schema.Core;
using Schema.Core.Data;
using Schema.Core.Schemes;
using UnityEngine;
using static Schema.Core.Schema;

namespace ExampleProject.Schemes 
{

    /// <summary>
    /// This class was auto-generated by Schema based on the 'Manifest' data scheme.
    /// Do not modify this file directly. Changes may be overwritten.
    /// </summary>
    public partial class ManifestScheme : SchemeWrapper<ManifestEntry>
    {
        public const string SCHEMA_NAME = "Manifest";
        
     
        public static class Ids
        {
         
            public const string MANIFEST = "Manifest";
         
            public const string ENTITIES = "Entities";
         
            public const string REWARDTYPE = "RewardType";
         
            public const string CHESTS = "Chests";
     
        }

     
        public static SchemaResult<ManifestScheme> Get()
        {
            if (GetScheme(SCHEMA_NAME).Try(out var scheme, out var error))
            {
                return SchemaResult<ManifestScheme>.Pass(new ManifestScheme(scheme));
            }
            
            return error.CastError<ManifestScheme>();
        }
        
        public static SchemaResult<ManifestEntry> GetEntry(object entryId)
        {
            if (!Get().Try(out var scheme, out var schemeError))
            {
                return schemeError.CastError<ManifestEntry>();
            }
            
            return scheme.GetEntryById(entryId);
        }

        public ManifestScheme(DataScheme dataScheme) : base(dataScheme) {}

        protected override ManifestEntry EntryFactory(DataScheme dataScheme, DataEntry dataEntry) {
            return new ManifestEntry(dataScheme, dataEntry);
        }
    }

    [SerializeField]
    public partial class ManifestEntry : EntryWrapper
    {
        public ManifestEntry(DataScheme dataScheme, DataEntry entry) : base(dataScheme, entry) {}

     
        /// <summary>
        /// The name of the scheme
        /// </summary>
     
        public string SchemeName
        {
            get => DataEntry.GetDataAsString("SchemeName");
            set => DataScheme.SetDataOnEntry(DataEntry, "SchemeName", value);
        }
     
        /// <summary>
        /// Relative path to the staging file from this scheme
        /// </summary>
     
        public string FilePath
        {
            get => DataEntry.GetDataAsString("FilePath");
            set => DataScheme.SetDataOnEntry(DataEntry, "FilePath", value);
        }
 
    }
}
