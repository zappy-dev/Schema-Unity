// <auto-generated>
// This file was generated by Schema based on the 'TestListTypes' data scheme.
// Any changes made directly to this file may be overwritten.
// </auto-generated>

using Schema.Core;
using Schema.Core.Data;
using Schema.Core.Schemes;
using static Schema.Core.Schema;


    /// <summary>
    /// Auto-generated strongly-typed wrapper for the 'TestListTypes' data scheme.
    /// </summary>
    public partial class TestListTypesScheme : SchemeWrapper<TestListTypesEntry>
    {
        /// <summary>
        /// The canonical name of the data scheme.
        /// </summary>
        public const string SCHEMA_NAME = "TestListTypes";
        
     
        /// <summary>
        /// Strongly-typed constants for identifier values in 'TestListTypes'.
        /// </summary>
        public static class Ids
        {
         
            public const string TEST1 = "Test1";
         
            public const string TEST2 = "Test2";
         
            public const string EMPTYLISTS = "EmptyLists";
     
        }

     
        public static SchemaResult<TestListTypesScheme> Get()
        {
            if (GetScheme(SCHEMA_NAME).Try(out var scheme, out var error))
            {
                return SchemaResult<TestListTypesScheme>.Pass(new TestListTypesScheme(scheme));
            }
            
            return error.CastError<TestListTypesScheme>();
        }
        
        public static SchemaResult<TestListTypesEntry> GetEntry(object entryId)
        {
            if (!Get().Try(out var scheme, out var schemeError))
            {
                return schemeError.CastError<TestListTypesEntry>();
            }
            
            return scheme.GetEntryById(entryId);
        }
        
        public TestListTypesScheme(DataScheme dataScheme) : base(dataScheme) {}
        
        protected override TestListTypesEntry EntryFactory(DataScheme dataScheme, DataEntry dataEntry) {
            return new TestListTypesEntry(dataScheme, dataEntry);
        }
    }

    public partial class TestListTypesEntry : EntryWrapper
    {
        /// <summary>
        /// Represents a single entry (row) in the 'TestListTypes' data scheme.
        /// </summary>
        public TestListTypesEntry(DataScheme dataScheme, DataEntry entry) : base(dataScheme, entry) {}

     
        /// <summary>
        /// Gets the value of 'ID'.
        /// </summary>
     
        public System.String ID => DataEntry.GetDataAsString("ID");
     
        /// <summary>
        /// Test list of strings
        /// </summary>
     
        public System.Collections.Generic.List<System.String> StringList => DataEntry.GetDataAsList<System.String>("StringList");
     
        /// <summary>
        /// Test list of integers
        /// </summary>
     
        public System.Collections.Generic.List<System.Int32> IntList => DataEntry.GetDataAsList<System.Int32>("IntList");
     
        /// <summary>
        /// Test list of floats
        /// </summary>
     
        public System.Collections.Generic.List<System.Single> FloatList => DataEntry.GetDataAsList<System.Single>("FloatList");
     
        /// <summary>
        /// Test list of booleans
        /// </summary>
     
        public System.Collections.Generic.List<System.Boolean> BoolList => DataEntry.GetDataAsList<System.Boolean>("BoolList");
 
    }

