using System.Collections;
using Moq;
using Schema.Core.Data;
using Schema.Core.IO;
using Schema.Core.Schemes;
using Schema.Core.Serialization;
using Schema.Core.Tests.Ext;

namespace Schema.Core.Tests.Serialization;

[TestFixture]
public class TestCSharpStorageFormat
{
    private static SchemaContext Context = new SchemaContext
    {
        Driver = nameof(TestCSharpStorageFormat)
    };
    private Mock<IFileSystem> mockFileSystem;
    private CSharpSchemeStorageFormat storageFormat;
    private DataScheme testScheme;
    private ManifestEntry testManifestEntry;

    [SetUp]
    public void OnTestSetup()
    {
        Schema.Reset();
        
        mockFileSystem = new Mock<IFileSystem>();
        Schema.SetStorage(new Storage(mockFileSystem.Object));
        Schema.InitializeTemplateManifestScheme(Context);
        
        storageFormat = new CSharpSchemeStorageFormat(mockFileSystem.Object);

        // Create a basic test scheme
        testScheme = new DataScheme("TestScheme");
        testScheme.AddAttribute(Context, "Id", DataType.Text, isIdentifier: true);
        testScheme.AddAttribute(Context, "StringField", DataType.Text);
        testScheme.AddAttribute(Context, "IntField", DataType.Integer);

        // Create a mock ManifestEntry
        var manifestScheme = ManifestScheme.Get().AssertPassed();
        var manifestDataEntry = new DataEntry();
        manifestDataEntry.SetData(Context, nameof(ManifestEntry.SchemeName), "TestScheme");
        manifestDataEntry.SetData(Context, nameof(ManifestEntry.CSharpNamespace), "");
        manifestDataEntry.SetData(Context, nameof(ManifestEntry.CSharpGenerateIds), false);
        testManifestEntry = new ManifestEntry(manifestScheme._, manifestDataEntry);
        
        storageFormat.ManifestEntry = testManifestEntry;
    }

    [Test]
    public void Test_Serialize_BasicScheme_GeneratesValidCode()
    {
        // Act
        var code = storageFormat.Serialize(Context, testScheme).AssertPassed();

        // Assert
        
        // Verify basic structure
        Assert.That(code, Does.Contain("// <auto-generated>"));
        Assert.That(code, Does.Contain("public partial class TestSchemeScheme"));
        Assert.That(code, Does.Contain("public partial class TestSchemeEntry"));
        Assert.That(code, Does.Contain("public const string SCHEMA_NAME = \"TestScheme\""));
        
        // Verify attributes are generated
        Assert.That(code, Does.Contain("public System.String StringField"));
        Assert.That(code, Does.Contain("public System.Int32 IntField"));
    }

    [Test]
    public void Test_Serialize_WithNamespace_GeneratesNamespaceWrapper()
    {
        // Arrange
        testManifestEntry.CSharpNamespace = "MyProject.Schemes";

        // Act
        var code = storageFormat.Serialize(Context, testScheme).AssertPassed();

        // Assert
        
        Assert.That(code, Does.Contain("namespace MyProject.Schemes"));
        Assert.That(code, Does.Contain("}\n"));  // Closing brace for namespace
    }

    [Test]
    public void Test_Serialize_WithoutNamespace_NoNamespaceWrapper()
    {
        // Arrange
        testManifestEntry.CSharpNamespace = "";

        // Act
        var code = storageFormat.Serialize(Context, testScheme).AssertPassed();

        // Assert
        
        Assert.That(code, Does.Not.Contain("namespace "));
    }

    [Test]
    public void Test_Serialize_WithIdentifierAndGenerateIds_CreatesIdsClass()
    {
        // Arrange
        var schemeWithId = new DataScheme("ItemScheme");
        schemeWithId.AddAttribute(Context, "ItemId", DataType.Text, isIdentifier: true);
        schemeWithId.AddAttribute(Context, "Name", DataType.Text);
        
        // Add some entries with identifiers
        var entry1 = new DataEntry();
        entry1.SetData(Context, "ItemId", "SWORD");
        entry1.SetData(Context, "Name", "Sword");
        schemeWithId.AddEntry(Context, entry1);
        
        var entry2 = new DataEntry();
        entry2.SetData(Context, "ItemId", "SHIELD");
        entry2.SetData(Context, "Name", "Shield");
        schemeWithId.AddEntry(Context, entry2);
        
        // Create a new ManifestEntry for ItemScheme
        var manifestScheme = ManifestScheme.Get().AssertPassed();
        var itemManifestDataEntry = new DataEntry();
        itemManifestDataEntry.SetData(Context, nameof(ManifestEntry.SchemeName), "ItemScheme");
        itemManifestDataEntry.SetData(Context, nameof(ManifestEntry.CSharpNamespace), "");
        itemManifestDataEntry.SetData(Context, nameof(ManifestEntry.CSharpGenerateIds), true);
        var itemManifestEntry = new ManifestEntry(manifestScheme._, itemManifestDataEntry);
        
        storageFormat.ManifestEntry = itemManifestEntry;

        // Act
        var code = storageFormat.Serialize(Context, schemeWithId).AssertPassed();

        // Assert
        
        Assert.That(code, Does.Contain("public static class Ids"));
        Assert.That(code, Does.Contain("public const string SWORD = \"SWORD\""));
        Assert.That(code, Does.Contain("public const string SHIELD = \"SHIELD\""));
    }

    [Test]
    public void Test_Serialize_WithIdentifierButNoGenerateIds_NoIdsClass()
    {
        // Arrange
        var schemeWithId = new DataScheme("ItemScheme");
        schemeWithId.AddAttribute(Context, "ItemId", DataType.Text, isIdentifier: true);
        schemeWithId.AddAttribute(Context, "Name", DataType.Text);
        
        var entry1 = new DataEntry();
        entry1.SetData(Context, "ItemId", "SWORD");
        entry1.SetData(Context, "Name", "Sword");
        schemeWithId.AddEntry(Context, entry1);
        
        testManifestEntry.CSharpGenerateIds = false;

        // Act
        var code = storageFormat.Serialize(Context, schemeWithId).AssertPassed();

        // Assert
        
        Assert.That(code, Does.Not.Contain("public static class Ids"));
    }

    [Test]
    public void Test_Serialize_AttributeWithTooltip_GeneratesXmlDocComment()
    {
        // Arrange
        var schemeWithTooltip = new DataScheme("TooltipScheme");
        var attr = new AttributeDefinition(schemeWithTooltip, "SpecialField", DataType.Text)
        {
            AttributeToolTip = "This is a special field"
        };
        schemeWithTooltip.AddAttribute(Context, attr);

        // Act
        var code = storageFormat.Serialize(Context, schemeWithTooltip).AssertPassed();

        // Assert
        
        Assert.That(code, Does.Contain("/// <summary>"));
        Assert.That(code, Does.Contain("/// This is a special field"));
        Assert.That(code, Does.Contain("/// </summary>"));
    }

    [Test]
    public void Test_Serialize_AttributeWithoutTooltip_GeneratesDefaultDocComment()
    {
        // Act
        var code = storageFormat.Serialize(Context, testScheme).AssertPassed();

        // Assert
        
        // Should contain default doc comments
        Assert.That(code, Does.Contain("/// <summary>"));
        Assert.That(code, Does.Contain("/// Gets the value of 'StringField'."));
        Assert.That(code, Does.Contain("/// </summary>"));
    }

    [Test]
    public void Test_Serialize_DifferentDataTypes_GeneratesCorrectCSharpTypes()
    {
        // Arrange
        var schemeWithTypes = new DataScheme("TypedScheme");
        schemeWithTypes.AddAttribute(Context, "TextField", DataType.Text);
        schemeWithTypes.AddAttribute(Context, "IntField", DataType.Integer);
        schemeWithTypes.AddAttribute(Context, "FloatField", DataType.Float);
        schemeWithTypes.AddAttribute(Context, "BoolField", DataType.Boolean);

        // Act
        var code = storageFormat.Serialize(Context, schemeWithTypes).AssertPassed();

        // Assert
        
        Assert.That(code, Does.Contain("public System.String TextField"));
        Assert.That(code, Does.Contain("public System.Int32 IntField"));
        Assert.That(code, Does.Contain("public System.Single FloatField"));
        Assert.That(code, Does.Contain("public System.Boolean BoolField"));
    }

    [Test]
    public void Test_Serialize_EmptyScheme_GeneratesValidCode()
    {
        // Arrange
        var emptyScheme = new DataScheme("EmptyScheme");

        // Act
        var code = storageFormat.Serialize(Context, emptyScheme).AssertPassed();

        // Assert
        
        // Should still generate basic wrapper classes
        Assert.That(code, Does.Contain("public partial class EmptySchemeScheme"));
        Assert.That(code, Does.Contain("public partial class EmptySchemeEntry"));
    }

    [Test]
    public void Test_Serialize_SchemeNameWithSpaces_RemovesSpaces()
    {
        // Arrange
        var schemeWithSpaces = new DataScheme("My Test Scheme");
        schemeWithSpaces.AddAttribute(Context, "Field", DataType.Text);

        // Act
        var code = storageFormat.Serialize(Context, schemeWithSpaces).AssertPassed();

        // Assert
        
        Assert.That(code, Does.Contain("public partial class MyTestSchemeScheme"));
        Assert.That(code, Does.Contain("public partial class MyTestSchemeEntry"));
    }

    [Test]
    public void Test_Serialize_AttributeNameWithSpaces_RemovesSpaces()
    {
        // Arrange
        var scheme = new DataScheme("TestScheme");
        scheme.AddAttribute(Context, "My Field Name", DataType.Text);

        // Act
        var code = storageFormat.Serialize(Context, scheme).AssertPassed();

        // Assert
        
        Assert.That(code, Does.Contain("public System.String MyFieldName"));
    }

    [Test]
    public void Test_Serialize_InvalidSchemeIdentifier_Fails()
    {
        // Arrange
        var invalidScheme = new DataScheme("123InvalidName");

        // Act
        var result = storageFormat.Serialize(Context, invalidScheme);

        // Assert
        result.AssertFailed();
        Assert.That(result.Message, Does.Contain("Cannot generate identifier"));
    }

    [Test]
    public void Test_Serialize_InvalidAttributeIdentifier_Fails()
    {
        // Arrange
        var scheme = new DataScheme("ValidScheme");
        scheme.AddAttribute(Context, "123-invalid", DataType.Text);

        // Act
        var result = storageFormat.Serialize(Context, scheme);

        // Assert
        result.AssertFailed();
        Assert.That(result.Message, Does.Contain("Cannot generate identifier"));
    }

    [Test]
    public void Test_Serialize_AttributeNamePascalCase_ConvertsCorrectly()
    {
        // Arrange
        var scheme = new DataScheme("TestScheme");
        scheme.AddAttribute(Context, "some_field_name", DataType.Text);
        scheme.AddAttribute(Context, "anotherField", DataType.Integer);

        // Act
        var code = storageFormat.Serialize(Context, scheme).AssertPassed();

        // Assert
        
        Assert.That(code, Does.Contain("public System.String SomeFieldName"));
        Assert.That(code, Does.Contain("public System.Int32 AnotherField"));
    }

    [Test]
    public void Test_Serialize_IncludesRequiredUsings()
    {
        // Act
        var code = storageFormat.Serialize(Context, testScheme).AssertPassed();

        // Assert
        
        Assert.That(code, Does.Contain("using Schema.Core;"));
        Assert.That(code, Does.Contain("using Schema.Core.Data;"));
        Assert.That(code, Does.Contain("using Schema.Core.Schemes;"));
        Assert.That(code, Does.Contain("using static Schema.Core.Schema;"));
    }

    [Test]
    public void Test_Serialize_GeneratesGetMethod()
    {
        // Act
        var code = storageFormat.Serialize(Context, testScheme).AssertPassed();

        // Assert
        
        Assert.That(code, Does.Contain("public static SchemaResult<TestSchemeScheme> Get()"));
        Assert.That(code, Does.Contain("if (GetScheme(SCHEMA_NAME).Try(out var scheme, out var error))"));
    }

    [Test]
    public void Test_Serialize_GeneratesGetEntryMethod()
    {
        // Act
        var code = storageFormat.Serialize(Context, testScheme).AssertPassed();

        // Assert
        
        Assert.That(code, Does.Contain("public static SchemaResult<TestSchemeEntry> GetEntry(object entryId)"));
    }

    [Test]
    public void Test_Serialize_GeneratesEntryFactoryMethod()
    {
        // Act
        var code = storageFormat.Serialize(Context, testScheme).AssertPassed();

        // Assert
        
        Assert.That(code, Does.Contain("protected override TestSchemeEntry EntryFactory"));
        Assert.That(code, Does.Contain("return new TestSchemeEntry(dataScheme, dataEntry);"));
    }

    [Test]
    public void Test_Serialize_IdentifierWithSpecialChars_SanitizesCorrectly()
    {
        // Arrange
        var schemeWithId = new DataScheme("ItemScheme");
        schemeWithId.AddAttribute(Context, "ItemId", DataType.Text, isIdentifier: true);
        
        var entry1 = new DataEntry();
        entry1.SetData(Context, "ItemId", "ITEM-01");
        schemeWithId.AddEntry(Context, entry1);
        
        var entry2 = new DataEntry();
        entry2.SetData(Context, "ItemId", "ITEM #2");
        schemeWithId.AddEntry(Context, entry2);
        
        var entry3 = new DataEntry();
        entry3.SetData(Context, "ItemId", "ITEM,THREE");
        schemeWithId.AddEntry(Context, entry3);
        
        testManifestEntry.CSharpGenerateIds = true;

        // Act
        var code = storageFormat.Serialize(Context, schemeWithId).AssertPassed();

        // Assert
        
        Assert.That(code, Does.Contain("public const string ITEM_01 = \"ITEM-01\""));
        Assert.That(code, Does.Contain("public const string ITEM_POUND2 = \"ITEM #2\""));
        Assert.That(code, Does.Contain("public const string ITEMTHREE = \"ITEM,THREE\""));
    }

    [Test]
    public void Test_Serialize_IntegerIdentifier_GeneratesCorrectConstValue()
    {
        // Arrange
        var schemeWithId = new DataScheme("ItemScheme");
        schemeWithId.AddAttribute(Context, "ItemId", DataType.Integer, isIdentifier: true);
        
        var entry1 = new DataEntry();
        entry1.SetData(Context, "ItemId", 100);
        schemeWithId.AddEntry(Context, entry1);
        
        testManifestEntry.CSharpGenerateIds = true;

        // Act
        // Note: Integer identifiers that start with a number cannot be valid C# identifiers,
        // so this will fail as expected. However, the implementation correctly handles integer types.
        var result = storageFormat.Serialize(Context, schemeWithId);

        // Assert - This should fail due to invalid identifier name
        result.AssertFailed();
        Assert.That(result.Message, Does.Contain("Cannot generate identifier"));
    }

    [Test]
    public void Test_Serialize_OnlyPublishedAttributesIncluded()
    {
        // Arrange
        var scheme = new DataScheme("TestScheme");
        var publishedAttr = new AttributeDefinition(scheme, "PublishedField", DataType.Text)
        {
            ShouldPublish = true
        };
        var unpublishedAttr = new AttributeDefinition(scheme, "UnpublishedField", DataType.Text)
        {
            ShouldPublish = false
        };
        
        scheme.AddAttribute(Context, publishedAttr);
        scheme.AddAttribute(Context, unpublishedAttr);

        // Act
        var code = storageFormat.Serialize(Context, scheme).AssertPassed();

        // Assert
        
        Assert.That(code, Does.Contain("public System.String PublishedField"));
        Assert.That(code, Does.Not.Contain("UnpublishedField"));
    }

    [Test]
    public void Test_SerializeToFile_WritesToFileSystem()
    {
        // Arrange
        var filePath = "TestScheme.g.cs";
        
        mockFileSystem.Setup(fs => fs.WriteAllText(
            It.IsAny<SchemaContext>(), 
            It.IsAny<string>(), 
            It.IsAny<string>()))
            .Verifiable();

        // Act
        var result = storageFormat.SerializeToFile(Context, filePath, testScheme);

        // Assert
        result.AssertPassed();
        mockFileSystem.Verify(fs => fs.WriteAllText(
            It.IsAny<SchemaContext>(), 
            filePath, 
            It.IsAny<string>()), Times.Once);
    }

    [Test]
    public void Test_SchemeClassIdentifier_ConvertsCorrectly()
    {
        // Test static helper methods
        Assert.That(CSharpSchemeStorageFormat.SchemeClassIdentifier("TestScheme"), Is.EqualTo("TestSchemeScheme"));
        Assert.That(CSharpSchemeStorageFormat.SchemeClassIdentifier("My Test"), Is.EqualTo("MyTestScheme"));
        Assert.That(CSharpSchemeStorageFormat.SchemeClassIdentifier("simple"), Is.EqualTo("SimpleScheme"));
    }

    [Test]
    public void Test_SchemeEntryClassIdentifier_ConvertsCorrectly()
    {
        // Test static helper methods
        Assert.That(CSharpSchemeStorageFormat.SchemeEntryClassIdentifier("TestScheme"), Is.EqualTo("TestSchemeEntry"));
        Assert.That(CSharpSchemeStorageFormat.SchemeEntryClassIdentifier("My Test"), Is.EqualTo("MyTestEntry"));
        Assert.That(CSharpSchemeStorageFormat.SchemeEntryClassIdentifier("simple"), Is.EqualTo("SimpleEntry"));
    }

    [Test]
    public void Test_Serialize_InheritsFromCorrectBaseClasses()
    {
        // Act
        var code = storageFormat.Serialize(Context, testScheme).AssertPassed();

        // Assert
        
        Assert.That(code, Does.Contain("public partial class TestSchemeScheme : SchemeWrapper<TestSchemeEntry>"));
        Assert.That(code, Does.Contain("public partial class TestSchemeEntry : EntryWrapper"));
    }

    [Test]
    public void Test_Extension_ReturnsCorrectValue()
    {
        Assert.That(storageFormat.Extension, Is.EqualTo("g.cs"));
    }

    [Test]
    public void Test_DisplayName_ReturnsCorrectValue()
    {
        Assert.That(storageFormat.DisplayName, Is.EqualTo("CodeGen C#"));
    }

    [Test]
    public void Test_IsImportSupported_ReturnsFalse()
    {
        Assert.That(storageFormat.IsImportSupported, Is.False);
    }

    [Test]
    public void Test_IsExportSupported_ReturnsTrue()
    {
        Assert.That(storageFormat.IsExportSupported, Is.True);
    }

    [Test]
    public void Test_Deserialize_ThrowsNotImplementedException()
    {
        Assert.Throws<System.NotImplementedException>(() => 
            storageFormat.Deserialize(Context, "some content"));
    }

    [Test]
    public void Test_DeserializeFromFile_ThrowsNotImplementedException()
    {
        Assert.Throws<System.NotImplementedException>(() => 
            storageFormat.DeserializeFromFile(Context, "some_file.cs"));
    }
}

